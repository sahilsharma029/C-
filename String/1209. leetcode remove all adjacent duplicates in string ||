class Solution {
public: 
    bool chasame(string&ans, char&newch, int k_1)
    {
        int it = ans.size() - 1;
        for(int i = 0; i<k_1; ++i)
        {
            if(newch != ans[it])
            {
                return false;
                
            }
            it--;
        }
        return true;
    }

    string removeDuplicates(string s, int k) {
        string ans;
        for(int i = 0; i< s.size(); i++)
        {
            char &newch = s[i];
            if(ans.size() < k-1)
            {
                ans.push_back(newch);
            }
            else{
                if(chasame(ans,newch,k-1))
                {
                    for(int j = 0; j<k-1; j++)
                    {
                        ans.pop_back();
                    }
                }
                else
                {
                        ans.push_back(newch);
                    }
                
                
            }
        }
        return ans;
    }
};























#include <iostream>
using namespace std;
bool same(string& temp, char newch, int k_1)
{
  int j = temp.size() -  1;
  for(int i = 0;i<k_1;i++)
  {
    if(temp[j] != newch)
    {
      return false;
    }
    j--;
  }
  return true;
}
int main() {
  string s;
  cin>>s;
  int k ;
  cin>>k;
  string temp = "";
  for(int i = 0;i<s.length();i++)
  {
    char newch = s[i];
    if(same(temp,newch,k-1)){
      for(int j = 0;j<k-1;j++)
      {
        temp.pop_back();
      }
    }
    else{
      temp.push_back(newch);
    }
  }
  cout<<temp;
  return 0;
}
